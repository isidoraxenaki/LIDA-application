#This code aims to calculate the heatwave occurrences in the Northern Hemisphere during the summer of 2010. This method is used in literature (Sutanto et al., 2020)
#and it defines heatwaves when both daily maximum and minimum air temperatures at 2 m exceed the corresponding climatological 90th percentile for 3 days or longer (Source of Data: ERA 5)

#Import essential packages
import pandas as pd
import numpy as np
import xarray as xr
from datetime import timedelta
import datetime as dt
import matplotlib.pyplot as plt
from netCDF4 import Dataset
import cartopy.crs as ccrs
import cartopy.feature as cfeature


#Open netCDF files of maximum and minimum temperature in 2010
Data_Tmax_2010 = xr.open_dataset("/nfs/a68/htmq9847/de2afd17ccdbe888272194ce175ef5b0.nc")
Data_Tmin_2010 = xr.open_dataset("/nfs/a68/htmq9847/Tmin_2010.nc")

#Read in variables of minimum and maximum temperature, latitude, longitude and time
maxtemp = Data_Tmax_2010['t2m'][:]
mintemp = Data_Tmin_2010['t2m'][:]
lat = Data_Tmax_2010['latitude'][:]
lon = Data_Tmax_2010['longitude'][:]
time = Data_Tmax_2010['valid_time'][:]

#Convert temperature variables to celcious
maxtemp = maxtemp - 273.15
mintemp = mintemp - 273.15

#Index with temperature variables according to summer season
summer_maxtemp = maxtemp.sel(valid_time = (Data_Tmax_2010.valid_time.dt.season == 'JJA'))
summer_mintemp = mintemp.sel(valid_time = (Data_Tmin_2010.valid_time.dt.season == 'JJA'))

#Calculate maximum and minimum temperature across a 9-day moving window mean
nineday_maxtemp = summer_maxtemp.rolling(valid_time = 9, center = True).mean()     
nineday_mintemp = summer_mintemp.rolling(valid_time = 9, center = True).mean()     

#Calculate the 90th percentile of the maximum and minimum 9-day moving window mean temperature
Percentile_Tmax = nineday_maxtemp.quantile(0.9, dim = 'valid_time')
Percentile_Tmin = nineday_mintemp.quantile(0.9, dim = 'valid_time')

#Define Heatwaves

#Define the temperature function of heatwaves where the summer max and min temperatures are larger than their 90th percentiles.
#Replace with 0 where the condition is not met
temp_function = summer_maxtemp.where(((summer_maxtemp > Percentile_Tmax) & (summer_mintemp > Percentile_Tmin)), 0)

#Replace with one the value that meet the temperature function condition (by replacing the where the value is not 0 with 1)
temp_function = temp_function.where((temp_function == 0.0), 1)

#Define a minimum observation window summation of 3 days for temperature function 
min_observation_window = (temp_function.rolling(valid_time = 3, center = True).sum())

#Define heatwaves where the summ of observations is equal to 3
#Replace with 0 where the condition is not met
heatwave = min_observation_window.where((min_observation_window == 3), 0)

#Replace the values that are equal to 3 with 1 (heatwave occurences)
Heatwave = heatwave.where((heatwave < 3), 1)

#Count the heatwave occurences across 2010 for every latutide and longitude
heatwave_timeav = (Heatwave.sum(dim = 'valid_time'))

#Index heatwave and latitude for the Northern Hemisphere
latitude1 = lat[0:361]
heatwave_timeav1 = heatwave_timeav[0:361]

# Initiate new Figure and Axes
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1, projection=ccrs.Robinson(central_longitude= 0))

# Add coastlines
ax1.coastlines()

ax1.gridlines(draw_labels = True, linestyle='--')

im1 = ax1.contourf(lon, latitude1, heatwave_timeav1, extend='both', transform=ccrs.PlateCarree())
#im2 = ax1.contourf(lon, latitude2, heatwave_timeav2, extend='both', transform=ccrs.PlateCarree())

#Define colour map position
ax1_pos = ax1.get_position()

#Position the colour bar under the map figure and arrange its width
cax = fig.add_axes([ax1_pos.x0, 0.25, ax1_pos.width, 0.03])

#Place the colour bar horizontally
cbar = plt.colorbar(im1, cax=cax, orientation='horizontal')

#Set label to colour bar
cbar.set_label(r'Number of Heatwave Occurences', fontsize = 12)
